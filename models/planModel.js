const mongoose = require('mongoose');
const Schema = mongoose.Schema;

    const planSchema = Schema({
    is_active: {type: Boolean, required: true, default: true},
    user_id: { type: String, required: true},
    cycle_type: { type: String, required: true},
    cycle_from: { type: Date, required: true},
    cycle_to: { type: Date, required: true},
    eligibility_type: { type: String, required: true},
    eligibility_date: { type: Date},
    eligibility_percentage: { type: Number},
    salary_component: { type: Boolean},
    salary_component_list: { type: Array},
    global_currency: { type: Boolean},
    global_currency_list: { type: Array},
    prorate: { type: Boolean},
    prorate_unit: { type: String},
    off_cycle_prorate: { type: Boolean},
    off_cycle_prorate_unit: { type: String},
    parity: { type: String},
    merit_guidline:{ type: Boolean},
    supervisor_validation:{ type: String},
    split_recommendation: { type: Boolean},
    calculation_split_recommendation: { type: String},
    matrix_recommendation:{ type: Boolean},
    calculation_matrix_recommendation: { type: String},
    paygroups: { type: Boolean},
    paygroups_name: { type: String},
    enable_recommendation: { type: Boolean},
    pay_range_min: { type: String},
    pay_range_max:{ type: String},
    enable_bonus_incentives: { type: Boolean},
    use_diff_bonus_incentives: { type: Boolean},
    basis_of_bonus:{ type: String},
    bonus_list : { type: Array},
    merit_group_list: { type: Array},
    bonus_group_list: { type: Array},
    budget_value:{ type: Number},
    budget_unit:{ type: String},
    hold_back: { type: Boolean},
    hold_back_value:{ type: Number},
    hold_back_unit:{ type: String},
    statutory_increment:{ type: Boolean},
    employee_group:{ type: String},
    increment_value:{ type: Number},
    increment_unit:{ type: String},
    //Time based Bonus
    time_based_bonus: {
        name: { type: String,default: "Time Based Bonus"},
        eligibility_data: { type: Date},
        bonus_based_on: { type: Boolean, default: false},
        bonus_percentage: { type: Number},
        manager_recommendation: { type: Boolean, default: false},
        manager_recommendation_percentage: { type: Number},
        bonus_guideline_percentage: { type: Number},
        pro_rate_bonus: { type: Boolean, default: false},
        pro_rate_bonus_unit: { type: String},
     },
    //Performance Bonus
    performance_bonus: {
        name: { type: String,default: "Performance Bonus"},
        eligibility_data: { type: Date},
        bonus_based_on_salary: { type: Boolean, default: false},
        bonus_percentage: { type: Number},
        performance_rating: { type: Boolean, default: false},
        name_of_bonus_factor: { type: String},
        bonus_table:{type: Array},
        bonus_multiplier: { type: Boolean, default: false},
        org_bonus_multiplier: { type: Number},
        team_score:{type:Number},
        manager_recommendation: { type: Boolean, default: false},
        manager_recommendation_percentage: { type: Number},
        bonus_guideline_percentage: { type: Number},
        pro_rate_bonus: { type: Boolean, default: false},
        pro_rate_bonus_unit: { type: String},
        },
        template_file:{type:Object},
    //  plan_id:{
    //     type: mongoose.Schema.Types.ObjectId,
    //     default:  new mongoose.Types.ObjectId(),
    //   }
})


const plan = mongoose.model('plans', planSchema);
module.exports = plan